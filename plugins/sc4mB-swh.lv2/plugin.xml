<?xml version="1.0"?>
<!DOCTYPE ladspa SYSTEM "ladspa-swh.dtd">
<?xml-stylesheet href="ladspa.css" type="text/css"?>

<ladspa>
  <global>
    <meta name="maker" value="Steve Harris &lt;steve@plugin.org.uk&gt;"/>
    <meta name="copyright" value="GPL"/>
    <meta name="properties" value="HARD_RT_CAPABLE"/>
    <code><![CDATA[
      #include "util/db.h"
      #include "util/rms.h"
      #include "util/iir.h"
      #include "util/buffer.h"
      #include "util/biquad.h"
      #define A_TBL 256
    ]]></code>
  </global>

  <plugin label="sc4mB" id="12044" class="CompressorPlugin">
    <name>SC4 monoB</name>
    <p>A mono compressor with variable envelope follower for RMS / peak behaviour. Based on the code for SC4.</p>

    <callback event="instantiate"><![CDATA[
      unsigned int i;
      sample_rate = (float)s_rate;

      rms = rms_env_new();
      sum = 0.0f;
      amp = 0.0f;
      gain = 0.0f;
      gain_t = 0.0f;
      env = 0.0f;
      env_rms = 0.0f;
      env_peak = 0.0f;
      count = 0;

      as = malloc(A_TBL * sizeof(float));
      as[0] = 1.0f;
      for (i=1; i<A_TBL; i++) {
	as[i] = expf(-1.0f / (sample_rate * (float)i / (float)A_TBL));
      }

      db_init();

       filters = calloc(3, sizeof(biquad));
       biquad_init(&filters[0]);
       biquad_init(&filters[1]);
       biquad_init(&filters[2]);

    ]]></callback>

    <callback event="cleanup"><![CDATA[
      rms_env_free(plugin_data->rms);
      free(plugin_data->as);
    ]]></callback>

   <callback event="activate"><![CDATA[
                 
       plugin_data->gt_hp = init_iir_stage(IIR_STAGE_LOWPASS,1,3,2);
       plugin_data->iirf_hp = init_iirf_t(plugin_data->gt_hp);
       butterworth_stage(plugin_data->gt_hp, 1, *(plugin_data->GUIcutoff_hp), 
		  			   1.2f, 
					   sample_rate);

       plugin_data->gt_lp = init_iir_stage(IIR_STAGE_LOWPASS,1,3,2);
       plugin_data->iirf_lp = init_iirf_t(plugin_data->gt_lp);
       butterworth_stage(plugin_data->gt_lp, 0, *(plugin_data->GUIcutoff_lp), 
		  			   1.2f, 
					   sample_rate);

       biquad_init(&filters[0]);
       biquad_init(&filters[1]);
       biquad_init(&filters[2]);


   ]]></callback>




    <callback event="run"><![CDATA[
      //  el ratio de 1:ratio
      // zona limiter 2 * Threshold + 20 / 0, -5  
      // zona compresor 0.32 * Threshold + 11.6 / -5, -30 
      // zona leveller 0.04 * Threshold + 3.35 / -30, -50

       float * tempIn;
       float * tempOut;
       tempIn = (float *) calloc(sample_count, sizeof(float));
       tempOut = (float *) calloc(sample_count, sizeof(float));

       eq_set_params(&filters[0], fc_1, gain_1, abs(gain_1) * (-0.0909f) + 2.5909f, sample_rate);
       eq_set_params(&filters[1], fc_2, gain_2, abs(gain_2) * (-0.0909f) + 2.5909f, sample_rate);
       eq_set_params(&filters[2], fc_3, gain_3, abs(gain_3) * (-0.0909f) + 2.5909f, sample_rate);


       float in;

      unsigned long pos;
      float ratio;
      const float knee = 3.0f;
      const float attack = 1.5f;
      const float release = 30.0f;

      ratio = 1.05f;
      if (threshold <= 0.0f && threshold > -5.0f)
         ratio =  2.0f * threshold + 20.0f; 
      if (threshold <= -5.0f && threshold > -30.0f)
         ratio =  0.32f * threshold + 11.6f; 
      if (threshold <= -30.0f && threshold >= -50.0f)
         ratio =  0.045f * threshold + 3.35f; 
        

      const float ga = attack < 2.0f ? 0.0f : as[f_round(attack * 0.001f * (float)(A_TBL-1))];
      const float gr = as[f_round(release * 0.001f * (float)(A_TBL-1))];
      const float rs = (ratio - 1.0f) / ratio;
      const float mug = db2lin(makeup_gain);
      const float knee_min = db2lin(threshold - knee);
      const float knee_max = db2lin(threshold + knee);
      const float ef_a = ga * 0.25f;
      const float ef_ai = 1.0f - ef_a;

      const float rms_peak = 0.0f;

      for (pos = 0; pos < sample_count; pos++){
        tempIn[pos] = input[pos] * DB_CO(GUIInGain);
      }

      butterworth_stage(gt_hp, 1, GUIcutoff_hp, 1.2f, sample_rate);
      iir_process_buffer_1s_5(iirf_hp, gt_hp, tempIn, tempOut, sample_count);

      butterworth_stage(gt_lp, 0, GUIcutoff_lp, 1.2f, sample_rate);
      iir_process_buffer_1s_5(iirf_lp, gt_lp, tempOut, tempIn, sample_count);

      // peak stage
       for (pos = 0; pos < sample_count; pos++) {
         in = biquad_run(&filters[0], tempIn[pos]);
         in = biquad_run(&filters[1], in);
         in = biquad_run(&filters[2], in);
         tempIn[pos]= in;
       }


      // compressor stage
      for (pos = 0; pos < sample_count; pos++) {
       	const float lev_in = tempIn[pos];
	sum += lev_in * lev_in;

        if (amp > env_rms) {
          env_rms = env_rms * ga + amp * (1.0f - ga);
        } else {
          env_rms = env_rms * gr + amp * (1.0f - gr);
        }
	round_to_zero(&env_rms);
        if (lev_in > env_peak) {
          env_peak = env_peak * ga + lev_in * (1.0f - ga);
        } else {
          env_peak = env_peak * gr + lev_in * (1.0f - gr);
        }
	round_to_zero(&env_peak);
        if ((count++ & 3) == 3) {
          amp = rms_env_process(rms, sum * 0.25f);
          sum = 0.0f;

          env = LIN_INTERP(rms_peak, env_rms, env_peak);

	  if (env <= knee_min) {
            gain_t = 1.0f;
	  } else if (env < knee_max) {
	    const float x = -(threshold - knee - lin2db(env)) / knee;
	    gain_t = db2lin(-knee * rs * x * x * 0.25f);
          } else {
            gain_t = db2lin((threshold - lin2db(env)) * rs);
          }
        }
        gain = gain * ef_a + gain_t * ef_ai;
        buffer_write(output[pos], tempIn[pos] * gain * mug);
      }
      plugin_data->sum = sum;
      plugin_data->amp = amp;
      plugin_data->gain = gain;
      plugin_data->gain_t = gain_t;
      plugin_data->env = env;
      plugin_data->env_rms = env_rms;
      plugin_data->env_peak = env_peak;
      plugin_data->count = count;

      *(plugin_data->amplitude) = lin2db(env);
      *(plugin_data->gain_red) = lin2db(gain);


       free(tempIn);
       free(tempOut);
    ]]></callback>

    <port label="GUIInGain" dir="input" type="control" hint="default_0">
      <name>InpG</name>
      <p>The gain in the input signal, in decibels.</p>
      <range min="-12" max="+12"/>
    </port>

   <port label="GUIcutoff_hp" dir="input" type="control" hint="default_low, logarithmic">
	<name>Cutoff Frequency (Hz)</name>
 	<range min="10" max="1000"/>
   </port>

   <port label="GUIcutoff_lp" dir="input" type="control" hint="default_low, logarithmic">
	<name>Cutoff Frequency (Hz)</name>
 	<range min="3000" max="20000"/>
   </port>

    <port label="gain_1" dir="input" type="control" hint="default_0">
      <name>Band 1 gain (dB)</name>
      <range min="-12" max="+12"/>
    </port>

    <port label="fc_1" dir="input" type="control" hint="logarithmic,default_low">
      <name>Band 1 frequency (Hz)</name>
      <range min="40" max="400"/>
    </port>

    <port label="gain_2" dir="input" type="control" hint="default_0">
      <name>Band 2 gain (dB)</name>
      <range min="-12" max="+12"/>
    </port>

    <port label="fc_2" dir="input" type="control" hint="logarithmic,default_middle">
      <name>Band 2 frequency (Hz)</name>
      <range min="200" max="4000"/>
    </port>

    <port label="gain_3" dir="input" type="control" hint="default_0">
      <name>Band 3 gain (dB)</name>
      <range min="-12" max="+12"/>
    </port>

    <port label="fc_3" dir="input" type="control" hint="logarithmic,default_high">
      <name>Band 3 frequency (Hz)</name>
      <range min="800" max="15000"/>
    </port>



    <!--port label="rms_peak" dir="input" type="control" hint="default_minimum">
      <name>RMS/peak</name>
      <p>The balance between the RMS and peak envelope followers.</p>
      <p>RMS is generally better for subtle, musical compression and peak 
	 is better for heavier, fast compression and percussion.</p>
      <range min="0" max="1"/>
    </port-->

    <!-- port label="attack" dir="input" type="control" hint="default_low">
      <name>Attack time (ms)</name>
      <p>The attack time in milliseconds.</p>
      <range min="1.5" max="400"/>
    </port-->

    <!-- port label="release" dir="input" type="control" hint="default_middle">
      <name>Release time (ms)</name>
      <p>The release time in milliseconds.</p>
      <range min="2" max="800"/>
    </port-->

    <port label="threshold" dir="input" type="control" hint="default_maximum">
      <name>Threshold level (dB)</name>
      <p>The point at which the compressor will start to kick in.</p>
      <range min="-50" max="0"/>
    </port>

    <!--port label="ratio" dir="input" type="control" hint="default_1">
      <name>Ratio (1:n)</name>
      <p>The gain reduction ratio used when the signal level exceeds the threshold.</p>
      <range min="1" max="20"/>
    </port-->

    <!--port label="knee" dir="input" type="control" hint="default_low">
      <name>Knee radius (dB)</name>
      <p>The distance from the threshold where the knee curve starts.</p>
      <range min="1" max="10"/>
    </port-->

    <port label="makeup_gain" dir="input" type="control" hint="default_0">
      <name>Makeup gain (dB)</name>
      <p>Controls the gain of the makeup input signal in dB's.</p>
      <range min="-12" max="12"/>
    </port>

    <port label="amplitude" dir="output" type="control">
      <name>Amplitude (dB)</name>
      <p>The level of the input signal, in decibels.</p>
      <range min="-40" max="+12"/>
    </port>

    <port label="gain_red" dir="output" type="control">
      <name>Gain reduction (dB)</name>
      <p>The degree of gain reduction applied to the input signal, in decibels.</p>
      <range min="-24" max="0"/>
    </port>

    <port label="input" dir="input" type="audio">
      <name>Input</name>
    </port>

    <port label="output" dir="output" type="audio">
      <name>Output</name>
    </port>

    <instance-data label="rms" type="rms_env *" />
    <instance-data label="as" type="float *" />

    <instance-data label="sum" type="float" />
    <instance-data label="amp" type="float" />
    <instance-data label="gain" type="float" />
    <instance-data label="gain_t" type="float" />
    <instance-data label="env" type="float" />
    <instance-data label="env_rms" type="float" />
    <instance-data label="env_peak" type="float" />
    <instance-data label="count" type="unsigned int" />

    <instance-data label="iirf_hp" type="iirf_t*"/>
    <instance-data label="gt_hp" type="iir_stage_t*"/>  

    <instance-data label="iirf_lp" type="iirf_t*"/>
    <instance-data label="gt_lp" type="iir_stage_t*"/>  

    <instance-data label="filters" type="biquad *"/>
    <instance-data label="sample_rate" type="float"/>           
  </plugin>
</ladspa>
